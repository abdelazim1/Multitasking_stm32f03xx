
scheduler_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000780  08000780  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000780  08000780  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000780  08000780  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000780  08000780  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000780  08000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000008  08000790  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000790  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006cb  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044a  00000000  00000000  000206fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00020b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00020ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001363  00000000  00000000  00020da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d6c  00000000  00000000  00022103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000041a8  00000000  00000000  00022e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00027017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f8  00000000  00000000  00027068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000768 	.word	0x08000768

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08000768 	.word	0x08000768

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <App_init>:
 */

#include "App.h"

void App_init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	// TODO;
	schedStack_init();
 8000224:	f000 f97a 	bl	800051c <schedStack_init>
	tasksStack_init();
 8000228:	f000 f8f2 	bl	8000410 <tasksStack_init>
	led_init_all();
 800022c:	f000 f886 	bl	800033c <led_init_all>
	sysTick_init(TICK_HZ);
 8000230:	23fa      	movs	r3, #250	; 0xfa
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	0018      	movs	r0, r3
 8000236:	f000 fa15 	bl	8000664 <sysTick_init>
	sp_using_psp();
 800023a:	f000 fa07 	bl	800064c <sp_using_psp>
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <idle_task>:
void idle_task(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	//TODO
	while(1);
 8000248:	e7fe      	b.n	8000248 <idle_task+0x4>
	...

0800024c <task1>:
}
void task1(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	//TODO
	while(1)
	{
		led_on(LED_GREEN);
 8000250:	2009      	movs	r0, #9
 8000252:	f000 f8a5 	bl	80003a0 <led_on>
		delay(DELAY_COUNT_1S);
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <task1+0x24>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 f85b 	bl	8000314 <delay>
		led_off(LED_GREEN);
 800025e:	2009      	movs	r0, #9
 8000260:	f000 f8b6 	bl	80003d0 <led_off>
		delay(DELAY_COUNT_1S);
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <task1+0x24>)
 8000266:	0018      	movs	r0, r3
 8000268:	f000 f854 	bl	8000314 <delay>
		led_on(LED_GREEN);
 800026c:	e7f0      	b.n	8000250 <task1+0x4>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	001312d0 	.word	0x001312d0

08000274 <task2>:
	}

}
void task2(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	//TODO
	while(1)
		{
			led_on(LED_ORANGE);
 8000278:	200a      	movs	r0, #10
 800027a:	f000 f891 	bl	80003a0 <led_on>
			delay(DELAY_COUNT_500MS);
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <task2+0x24>)
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f847 	bl	8000314 <delay>
			led_off(LED_ORANGE);
 8000286:	200a      	movs	r0, #10
 8000288:	f000 f8a2 	bl	80003d0 <led_off>
			delay(DELAY_COUNT_500MS);
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <task2+0x24>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 f840 	bl	8000314 <delay>
			led_on(LED_ORANGE);
 8000294:	e7f0      	b.n	8000278 <task2+0x4>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	005f5e10 	.word	0x005f5e10

0800029c <task3>:
		}

}
void task3(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//TODO

	while(1)
	{
		led_on(LED_RED);
 80002a0:	200b      	movs	r0, #11
 80002a2:	f000 f87d 	bl	80003a0 <led_on>
		delay(DELAY_COUNT_250MS);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <task3+0x24>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 f833 	bl	8000314 <delay>
		led_off(LED_RED);
 80002ae:	200b      	movs	r0, #11
 80002b0:	f000 f88e 	bl	80003d0 <led_off>
		delay(DELAY_COUNT_250MS);
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <task3+0x24>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 f82c 	bl	8000314 <delay>
		led_on(LED_RED);
 80002bc:	e7f0      	b.n	80002a0 <task3+0x4>
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	017d7840 	.word	0x017d7840

080002c4 <SysTick_Handler>:
 *      Author: a_a
 */
#include "it.h"

void SysTick_Handler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//TODO
	/*
	 * remember clear flag
	 */
	gTickCount++;
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <SysTick_Handler+0x28>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <SysTick_Handler+0x28>)
 80002d0:	601a      	str	r2, [r3, #0]
	unblock_tasks();
 80002d2:	f000 f94f 	bl	8000574 <unblock_tasks>
	//pend the pendsv exception == direct
	 ICSR |= ( 1 << 28);
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <SysTick_Handler+0x2c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <SysTick_Handler+0x2c>)
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	0549      	lsls	r1, r1, #21
 80002e0:	430a      	orrs	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]

}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	20000024 	.word	0x20000024
 80002f0:	e000ed04 	.word	0xe000ed04

080002f4 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm __vo("MRS R0,PSP");
 80002f4:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value to store SF2( R4 to R11)
	__asm __vo("STM R0!,{R4-R7}");
 80002f8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

	__asm __vo("PUSH {LR}");
 80002fa:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm __vo("BL save_psp_value");
 80002fc:	f000 f926 	bl	800054c <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm __vo("BL update_next_task");
 8000300:	f000 f966 	bl	80005d0 <update_next_task>

	//2. get its past PSP value
	__asm __vo ("BL get_psp_value");
 8000304:	f000 f912 	bl	800052c <get_psp_value>

	//3. Using that PSP value to retrieve SF2(R4 to R11)
	__asm __vo ("LDMIA R0!,{R4-R7}");
 8000308:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}

	//4. update PSP and exit
	__asm __vo("MSR PSP,R0");
 800030a:	f380 8809 	msr	PSP, r0

	__asm __vo("POP {PC}");
 800030e:	bd00      	pop	{pc}

	__asm __vo("BX LR");
 8000310:	4770      	bx	lr



}
 8000312:	46c0      	nop			; (mov r8, r8)

08000314 <delay>:
#include "led.h"



void delay(u32 count)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  for(u32 i = 0 ; i < count ; i++);
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	e002      	b.n	8000328 <delay+0x14>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3301      	adds	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d3f8      	bcc.n	8000322 <delay+0xe>
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	b004      	add	sp, #16
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <led_init_all>:

void led_init_all(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	RCC_AHBENR |= ( 1 << 17);
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <led_init_all+0x60>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <led_init_all+0x60>)
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	0289      	lsls	r1, r1, #10
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	GPIOA_MODER |= ( 1 << (2 * LED_GREEN));
 800034e:	2390      	movs	r3, #144	; 0x90
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	02c9      	lsls	r1, r1, #11
 800035c:	430a      	orrs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
	GPIOA_MODER |= ( 1 << (2 * LED_ORANGE));
 8000360:	2390      	movs	r3, #144	; 0x90
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	2390      	movs	r3, #144	; 0x90
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0349      	lsls	r1, r1, #13
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
	GPIOA_MODER |= ( 1 << (2 * LED_RED));
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	2390      	movs	r3, #144	; 0x90
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	03c9      	lsls	r1, r1, #15
 8000380:	430a      	orrs	r2, r1
 8000382:	601a      	str	r2, [r3, #0]

    led_off(LED_GREEN);
 8000384:	2009      	movs	r0, #9
 8000386:	f000 f823 	bl	80003d0 <led_off>
    led_off(LED_ORANGE);
 800038a:	200a      	movs	r0, #10
 800038c:	f000 f820 	bl	80003d0 <led_off>
    led_off(LED_RED);
 8000390:	200b      	movs	r0, #11
 8000392:	f000 f81d 	bl	80003d0 <led_off>


}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021014 	.word	0x40021014

080003a0 <led_on>:

void led_on(u8 led_no)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	0002      	movs	r2, r0
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	701a      	strb	r2, [r3, #0]
  GPIOx_ODR |= ( 1 << led_no);
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <led_on+0x2c>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4099      	lsls	r1, r3
 80003b8:	000b      	movs	r3, r1
 80003ba:	0019      	movs	r1, r3
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <led_on+0x2c>)
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	48000014 	.word	0x48000014

080003d0 <led_off>:

void led_off(u8 led_no)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	0002      	movs	r2, r0
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	701a      	strb	r2, [r3, #0]
	  GPIOx_ODR &= ~( 1 << led_no);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <led_off+0x2c>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2101      	movs	r1, #1
 80003e6:	4099      	lsls	r1, r3
 80003e8:	000b      	movs	r3, r1
 80003ea:	43db      	mvns	r3, r3
 80003ec:	0019      	movs	r1, r3
 80003ee:	4b03      	ldr	r3, [pc, #12]	; (80003fc <led_off+0x2c>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]

}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	48000014 	.word	0x48000014

08000400 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	App_init();
 8000404:	f7ff ff0c 	bl	8000220 <App_init>
	task1();
 8000408:	f7ff ff20 	bl	800024c <task1>
	for(;;);
 800040c:	e7fe      	b.n	800040c <main+0xc>
	...

08000410 <tasksStack_init>:
u32 gTickCount = 0;

TCB_T user_tasks[MAX_TASKS];

void tasksStack_init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 8000416:	4b38      	ldr	r3, [pc, #224]	; (80004f8 <tasksStack_init+0xe8>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 800041c:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <tasksStack_init+0xe8>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000422:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <tasksStack_init+0xe8>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000428:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <tasksStack_init+0xe8>)
 800042a:	2200      	movs	r2, #0
 800042c:	639a      	str	r2, [r3, #56]	; 0x38

	/*
	 * TODO
	 * Generic pointer & function pointer
	 */
	user_tasks[0].psp_value = idleTask_start;
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <tasksStack_init+0xe8>)
 8000430:	4a32      	ldr	r2, [pc, #200]	; (80004fc <tasksStack_init+0xec>)
 8000432:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = task1_start;
 8000434:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <tasksStack_init+0xe8>)
 8000436:	4a32      	ldr	r2, [pc, #200]	; (8000500 <tasksStack_init+0xf0>)
 8000438:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = task2_start;
 800043a:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <tasksStack_init+0xe8>)
 800043c:	4a31      	ldr	r2, [pc, #196]	; (8000504 <tasksStack_init+0xf4>)
 800043e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value =task3_start ;
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <tasksStack_init+0xe8>)
 8000442:	4a31      	ldr	r2, [pc, #196]	; (8000508 <tasksStack_init+0xf8>)
 8000444:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = idle_task;
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <tasksStack_init+0xe8>)
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <tasksStack_init+0xfc>)
 800044a:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1;
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <tasksStack_init+0xe8>)
 800044e:	4a30      	ldr	r2, [pc, #192]	; (8000510 <tasksStack_init+0x100>)
 8000450:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2;
 8000452:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <tasksStack_init+0xe8>)
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <tasksStack_init+0x104>)
 8000456:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3;
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <tasksStack_init+0xe8>)
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <tasksStack_init+0x108>)
 800045c:	63da      	str	r2, [r3, #60]	; 0x3c

	u32 *pPSP;
	for (u8 i = 0; i<MAX_TASKS; ++i)
 800045e:	1cfb      	adds	r3, r7, #3
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	e03e      	b.n	80004e4 <tasksStack_init+0xd4>
	{
		pPSP = (u32*)user_tasks[i].psp_value;
 8000466:	1cfb      	adds	r3, r7, #3
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <tasksStack_init+0xe8>)
 800046c:	0112      	lsls	r2, r2, #4
 800046e:	58d3      	ldr	r3, [r2, r3]
 8000470:	607b      	str	r3, [r7, #4]

		pPSP--;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3b04      	subs	r3, #4
 8000476:	607b      	str	r3, [r7, #4]
		*pPSP = DUMMY_XPSR;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0452      	lsls	r2, r2, #17
 800047e:	601a      	str	r2, [r3, #0]

		/* PC */
		pPSP--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b04      	subs	r3, #4
 8000484:	607b      	str	r3, [r7, #4]
		*pPSP = (u32) user_tasks[i].task_handler;
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <tasksStack_init+0xe8>)
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	001a      	movs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]

		/* LR */
		pPSP--;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3b04      	subs	r3, #4
 800049e:	607b      	str	r3, [r7, #4]
		*pPSP = EXC_RETURN;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2203      	movs	r2, #3
 80004a4:	4252      	negs	r2, r2
 80004a6:	601a      	str	r2, [r3, #0]

		for(u8 j = 0 ; j < 13 ; j++)
 80004a8:	1cbb      	adds	r3, r7, #2
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	e00a      	b.n	80004c6 <tasksStack_init+0xb6>
		{
					pPSP--;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b04      	subs	r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
				    *pPSP = 0;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
		for(u8 j = 0 ; j < 13 ; j++)
 80004bc:	1cbb      	adds	r3, r7, #2
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	1cbb      	adds	r3, r7, #2
 80004c2:	3201      	adds	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	1cbb      	adds	r3, r7, #2
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b0c      	cmp	r3, #12
 80004cc:	d9f0      	bls.n	80004b0 <tasksStack_init+0xa0>

		}
		user_tasks[i].psp_value = (u32)pPSP;
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <tasksStack_init+0xe8>)
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	50d1      	str	r1, [r2, r3]
	for (u8 i = 0; i<MAX_TASKS; ++i)
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	1cfa      	adds	r2, r7, #3
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	3201      	adds	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	1cfb      	adds	r3, r7, #3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d9bc      	bls.n	8000466 <tasksStack_init+0x56>
	}
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000028 	.word	0x20000028
 80004fc:	20001fff 	.word	0x20001fff
 8000500:	20001bff 	.word	0x20001bff
 8000504:	200017ff 	.word	0x200017ff
 8000508:	200013ff 	.word	0x200013ff
 800050c:	08000245 	.word	0x08000245
 8000510:	0800024d 	.word	0x0800024d
 8000514:	08000275 	.word	0x08000275
 8000518:	0800029d 	.word	0x0800029d

0800051c <schedStack_init>:
Naked void schedStack_init(void)
{
	__asm __vo("MSR MSP,%0": :"l" (schedStart) :);
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <schedStack_init+0xc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f383 8808 	msr	MSP, r3
	__asm __vo("BX LR");
 8000524:	4770      	bx	lr
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000004 	.word	0x20000004

0800052c <get_psp_value>:

u32 get_psp_value(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <get_psp_value+0x18>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <get_psp_value+0x1c>)
 8000538:	0112      	lsls	r2, r2, #4
 800053a:	58d3      	ldr	r3, [r2, r3]
}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000000 	.word	0x20000000
 8000548:	20000028 	.word	0x20000028

0800054c <save_psp_value>:

void save_psp_value(u32 current_psp_value)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <save_psp_value+0x20>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	001a      	movs	r2, r3
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <save_psp_value+0x24>)
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	50d1      	str	r1, [r2, r3]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000000 	.word	0x20000000
 8000570:	20000028 	.word	0x20000028

08000574 <unblock_tasks>:

	//enable interrupt
	INTERRUPT_ENABLE();
}
void unblock_tasks(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	for(u32 i = 1 ; i < MAX_TASKS ; i++)
 800057a:	2301      	movs	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e01b      	b.n	80005b8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <unblock_tasks+0x54>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	3308      	adds	r3, #8
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d010      	beq.n	80005b2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == gTickCount)
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <unblock_tasks+0x54>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	18d3      	adds	r3, r2, r3
 8000598:	3304      	adds	r3, #4
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <unblock_tasks+0x58>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d106      	bne.n	80005b2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <unblock_tasks+0x54>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	3308      	adds	r3, #8
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	for(u32 i = 1 ; i < MAX_TASKS ; i++)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d9e0      	bls.n	8000580 <unblock_tasks+0xc>
			}
		}

	}
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	20000024 	.word	0x20000024

080005d0 <update_next_task>:



void update_next_task(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	e021      	b.n	8000624 <update_next_task+0x54>
	{
		current_task++;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <update_next_task+0x74>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <update_next_task+0x74>)
 80005ea:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <update_next_task+0x74>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2103      	movs	r1, #3
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff fe0e 	bl	8000214 <__aeabi_uidivmod>
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <update_next_task+0x74>)
 80005fe:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <update_next_task+0x74>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <update_next_task+0x78>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	3308      	adds	r3, #8
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <update_next_task+0x4e>
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <update_next_task+0x74>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d106      	bne.n	800062c <update_next_task+0x5c>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d9da      	bls.n	80005e0 <update_next_task+0x10>
 800062a:	e000      	b.n	800062e <update_next_task+0x5e>
			break;
 800062c:	46c0      	nop			; (mov r8, r8)
	}

	if(state != TASK_READY_STATE)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <update_next_task+0x6a>
		current_task = 0;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <update_next_task+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000000 	.word	0x20000000
 8000648:	20000028 	.word	0x20000028

0800064c <sp_using_psp>:

Naked void sp_using_psp(void)
{
    /* initialize the PSP with TASK1 stack start address */
	__asm __vo ("PUSH {LR}"); 			//preserve LR which connects back to main()
 800064c:	b500      	push	{lr}
	__asm __vo ("BL get_psp_value");
 800064e:	f7ff ff6d 	bl	800052c <get_psp_value>
	__asm __vo ("MSR PSP,R0"); 			//initialize psp
 8000652:	f380 8809 	msr	PSP, r0
	__asm __vo ("POP {PC}");  			//pops back LR value
 8000656:	bd00      	pop	{pc}

	/* change SP to PSP using CONTROL register */
	__asm __vo ("MOV R0,#0X02");    	  //control register value
 8000658:	2002      	movs	r0, #2
	__asm __vo ("MSR CONTROL,R0");
 800065a:	f380 8814 	msr	CONTROL, r0
	__asm __vo ("BX LR");
 800065e:	4770      	bx	lr
}
 8000660:	46c0      	nop			; (mov r8, r8)
	...

08000664 <sysTick_init>:
 ============================================================================
 */
#include "sysTick.h"

sysTick_init(u32 tick)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	u32 load;

	load = (sysCLK/tick)-1;
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <sysTick_init+0x5c>)
 8000670:	f7ff fd4a 	bl	8000108 <__udivsi3>
 8000674:	0003      	movs	r3, r0
 8000676:	3b01      	subs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
	SYST_RVR &= ~(0x00ffffff);
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <sysTick_init+0x60>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <sysTick_init+0x60>)
 8000680:	0e12      	lsrs	r2, r2, #24
 8000682:	0612      	lsls	r2, r2, #24
 8000684:	601a      	str	r2, [r3, #0]
	SYST_RVR |= load;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <sysTick_init+0x60>)
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <sysTick_init+0x60>)
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	430a      	orrs	r2, r1
 8000690:	601a      	str	r2, [r3, #0]

	SELECT_sysTick_CLK(clkMask);
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <sysTick_init+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <sysTick_init+0x64>)
 8000698:	2104      	movs	r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
	sysTickINT_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <sysTick_init+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <sysTick_init+0x64>)
 80006a4:	2102      	movs	r1, #2
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
	sysTick_ENABLE();
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <sysTick_init+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <sysTick_init+0x64>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	601a      	str	r2, [r3, #0]
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	007a1200 	.word	0x007a1200
 80006c4:	e000e014 	.word	0xe000e014
 80006c8:	e000e010 	.word	0xe000e010

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d0:	e000      	b.n	80006d4 <Reset_Handler+0x8>
 80006d2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fa:	f000 f811 	bl	8000720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fe7f 	bl	8000400 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000710:	08000788 	.word	0x08000788
  ldr r2, =_sbss
 8000714:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000718:	20000058 	.word	0x20000058

0800071c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC_IRQHandler>
	...

08000720 <__libc_init_array>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	2600      	movs	r6, #0
 8000724:	4d0c      	ldr	r5, [pc, #48]	; (8000758 <__libc_init_array+0x38>)
 8000726:	4c0d      	ldr	r4, [pc, #52]	; (800075c <__libc_init_array+0x3c>)
 8000728:	1b64      	subs	r4, r4, r5
 800072a:	10a4      	asrs	r4, r4, #2
 800072c:	42a6      	cmp	r6, r4
 800072e:	d109      	bne.n	8000744 <__libc_init_array+0x24>
 8000730:	2600      	movs	r6, #0
 8000732:	f000 f819 	bl	8000768 <_init>
 8000736:	4d0a      	ldr	r5, [pc, #40]	; (8000760 <__libc_init_array+0x40>)
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <__libc_init_array+0x44>)
 800073a:	1b64      	subs	r4, r4, r5
 800073c:	10a4      	asrs	r4, r4, #2
 800073e:	42a6      	cmp	r6, r4
 8000740:	d105      	bne.n	800074e <__libc_init_array+0x2e>
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	00b3      	lsls	r3, r6, #2
 8000746:	58eb      	ldr	r3, [r5, r3]
 8000748:	4798      	blx	r3
 800074a:	3601      	adds	r6, #1
 800074c:	e7ee      	b.n	800072c <__libc_init_array+0xc>
 800074e:	00b3      	lsls	r3, r6, #2
 8000750:	58eb      	ldr	r3, [r5, r3]
 8000752:	4798      	blx	r3
 8000754:	3601      	adds	r6, #1
 8000756:	e7f2      	b.n	800073e <__libc_init_array+0x1e>
 8000758:	08000780 	.word	0x08000780
 800075c:	08000780 	.word	0x08000780
 8000760:	08000780 	.word	0x08000780
 8000764:	08000784 	.word	0x08000784

08000768 <_init>:
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076e:	bc08      	pop	{r3}
 8000770:	469e      	mov	lr, r3
 8000772:	4770      	bx	lr

08000774 <_fini>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr
